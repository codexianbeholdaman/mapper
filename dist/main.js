/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/config.js":
/*!***********************!*\
  !*** ./src/config.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _CONFIG_ACCESS_POINT_DATA: () => (/* binding */ _CONFIG_ACCESS_POINT_DATA),\n/* harmony export */   _CONFIG_GAME: () => (/* binding */ _CONFIG_GAME),\n/* harmony export */   _CONFIG_MAX_MAP_SIZE: () => (/* binding */ _CONFIG_MAX_MAP_SIZE),\n/* harmony export */   _CONFIG_PREFIX: () => (/* binding */ _CONFIG_PREFIX)\n/* harmony export */ });\n//A button for accessing data of a point; options:\n// auxclick - middle mouse click\n// contextmenu - right mouse click\nconst _CONFIG_ACCESS_POINT_DATA = 'auxclick';\n//Map, for which terrains defined in 'game_terrain.js' file will be used\nconst _CONFIG_GAME = 'Curse of the Azure Bonds';\n//Folder, in which map data is stored. It is added as a prefix to the image path. Right now it is used only to get screen captures\n//For example: if you want to access image located in ./a/b/c/d/e/f.png, you can:\n// define _CONFIG_PREFIX as a/ and add a line ./b/c/d/e/f.png to images\n// define _CONFIG_PREFIX as a/b/c/d/ and add a line ./e/f.png to images\n//The slash at the end is necessary - the trivial string concatenation was used\nconst _CONFIG_PREFIX = './map_data/';\n\n//Maximal allowed map size. The higher the value, the slower the initial loading time\nconst _CONFIG_MAX_MAP_SIZE = 50;\n\n//# sourceURL=webpack://my-webpack-project/./src/config.js?");

/***/ }),

/***/ "./src/game_terrain.js":
/*!*****************************!*\
  !*** ./src/game_terrain.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GAME_DATA: () => (/* binding */ GAME_DATA)\n/* harmony export */ });\nfunction create_terrain(color, button) {\n  return {\n    'color': color,\n    'button': button\n  };\n}\nvar GAME_DATA = {\n  'MM1': {\n    'terrains': {\n      'water': create_terrain('#99FFFF', 'w'),\n      'desert': create_terrain('#FFD481', 'd')\n    },\n    'default map size': [16, 16]\n  },\n  'MM2': {\n    'terrains': {\n      'water': create_terrain('#99FFFF', 'w'),\n      'desert': create_terrain('#FFD481', 'd'),\n      'ice': create_terrain('#B3FFCC', 'i'),\n      'bog': create_terrain('#CC99FF', 'b'),\n      'mountains': create_terrain('#CFCFCF', 'm'),\n      'forest': create_terrain('#66FF66', 'f')\n    },\n    'default map size': [16, 16]\n  },\n  'MMXeen': {\n    'terrains': {\n      'water': create_terrain('#99FFFF', 'w'),\n      'mountains': create_terrain('#CFCFCF', 'm'),\n      'forest': create_terrain('#66FF66', 'f'),\n      'lava': create_terrain('#FF6A4D', 'l'),\n      'deep_water': create_terrain('#8080FF', 'q'),\n      'clouds': create_terrain('#FFB3FF', 'c'),\n      'desert': create_terrain('#FFD481', 'd')\n    },\n    'default map size': [16, 16]\n  },\n  'Pool of Radiance': {\n    'terrains': {\n      'river': create_terrain('#99FFFF', 'w')\n    },\n    'default map size': [16, 16],\n    'y_order': 'ascending',\n    'backspace': 'revert'\n  },\n  'Curse of the Azure Bonds': {\n    'terrains': {},\n    'default map size': [16, 16],\n    'y_order': 'ascending',\n    'backspace': 'revert'\n  }\n};\n\n//# sourceURL=webpack://my-webpack-project/./src/game_terrain.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _seminal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./seminal.js */ \"./src/seminal.js\");\n\nnew _seminal_js__WEBPACK_IMPORTED_MODULE_0__.Application();\n\n//# sourceURL=webpack://my-webpack-project/./src/index.js?");

/***/ }),

/***/ "./src/presentation.js":
/*!*****************************!*\
  !*** ./src/presentation.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrowy_style: () => (/* binding */ arrowy_style),\n/* harmony export */   assign_style_to_element: () => (/* binding */ assign_style_to_element),\n/* harmony export */   inputter_style: () => (/* binding */ inputter_style),\n/* harmony export */   map_element_style: () => (/* binding */ map_element_style),\n/* harmony export */   marking_style: () => (/* binding */ marking_style),\n/* harmony export */   mini_teleport_style: () => (/* binding */ mini_teleport_style),\n/* harmony export */   point_of_entry_style: () => (/* binding */ point_of_entry_style),\n/* harmony export */   single_distance_teleport: () => (/* binding */ single_distance_teleport),\n/* harmony export */   standard_style: () => (/* binding */ standard_style),\n/* harmony export */   teleports_style: () => (/* binding */ teleports_style)\n/* harmony export */ });\nvar map_element_height = 50;\nvar map_element_width = 200;\nvar map_element_font = Math.floor(map_element_width * 0.08);\nvar point_size = 50;\nvar arrow_size = Math.floor(point_size * 0.4);\nvar single_distance_teleport = Math.floor(point_size / 6);\nvar point_shortcut_font_size = Math.floor(point_size * 7 / 24);\nvar marking_size = Math.floor(point_size * 0.5);\nvar standard_style = {\n  'display': 'inline-block',\n  'position': 'relative',\n  'width': `${point_size}px`,\n  'height': `${point_size}px`,\n  'backgroundColor': 'gray',\n  'verticalAlign': 'middle',\n  'lineHeight': `${point_size}px`,\n  'text-align': 'center',\n  'border': '1px solid black'\n};\nvar map_element_style = {\n  'height': `${map_element_height}px`,\n  'width': `${map_element_width}px`,\n  'textAlign': 'center',\n  'color': 'white',\n  'backgroundColor': '#880000',\n  'verticalAlign': 'middle',\n  'lineHeight': `${map_element_height}px`,\n  'fontSize': `${map_element_font}px`,\n  'display': 'inline-block',\n  'fontFamily': 'Arial'\n};\nvar arrowy_style = {\n  'zIndex': 2,\n  'position': 'absolute',\n  'top': 0,\n  'left': 0,\n  'border': '',\n  'color': 'red',\n  'backgroundColor': 'rgba(0, 0, 0, 0)',\n  'fontSize': `${arrow_size}px`\n};\nvar inputter_style = {\n  'position': 'absolute',\n  'width': `${point_size}px`,\n  'height': `${point_size - 15}px`,\n  //czory - czemu funkcjonalne?\n  'bottom': 0,\n  'left': 0,\n  'border': 'none',\n  'backgroundColor': 'rgba(0, 0, 0, 0)',\n  'fontSize': `${point_shortcut_font_size}px`,\n  'textAlign': 'center',\n  'display': 'inline',\n  'fontFamily': 'Arial'\n};\nvar point_of_entry_style = {\n  'lineHeight': '50px',\n  'height': '50px',\n  'width': '50px',\n  'backgroundColor': '#331100',\n  'color': 'white'\n};\nvar marking_style = {\n  'border': '',\n  'position': 'absolute',\n  'width': `${marking_size}px`,\n  'height': `${marking_size}px`,\n  'top': 0,\n  'left': 0,\n  'background': 'rgba(0, 0, 0, 0)'\n};\nvar teleports_style = {\n  'left': '',\n  'right': 0,\n  'width': `${3 * single_distance_teleport}px`,\n  'height': `${3 * single_distance_teleport}px`\n};\nvar mini_teleport_style = {\n  'width': `${single_distance_teleport}px`,\n  'height': `${single_distance_teleport}px`,\n  'position': 'absolute',\n  'background': 'rgba(0, 0, 0, 0)',\n  'lineHeight': `${single_distance_teleport}px`,\n  'fontSize': `${single_distance_teleport}px`\n};\nfunction assign_style_to_element(element, style) {\n  for (var style_part in style) {\n    element.style[style_part] = style[style_part];\n  }\n}\n\n//# sourceURL=webpack://my-webpack-project/./src/presentation.js?");

/***/ }),

/***/ "./src/seminal.js":
/*!************************!*\
  !*** ./src/seminal.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Application: () => (/* binding */ Application),\n/* harmony export */   Map: () => (/* binding */ Map)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ \"./src/config.js\");\n/* harmony import */ var _game_terrain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./game_terrain.js */ \"./src/game_terrain.js\");\n/* harmony import */ var _presentation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./presentation.js */ \"./src/presentation.js\");\n\n\n\nconst integer_to_dir = {\n  0: {\n    'x': 0,\n    'y': 1\n  },\n  1: {\n    'x': 1,\n    'y': 0\n  },\n  2: {\n    'x': 0,\n    'y': -1\n  },\n  3: {\n    'x': -1,\n    'y': 0\n  }\n};\nconst dir_to_arrow = {\n  0: '&uarr;',\n  1: '&rarr;',\n  2: '&darr;',\n  3: '&larr;'\n};\nconst dir_to_border = {\n  0: 'Top',\n  1: 'Right',\n  2: 'Bottom',\n  3: 'Left'\n};\nconst dir_to_cardinal = {\n  0: 'N',\n  1: 'E',\n  2: 'S',\n  3: 'W'\n};\nconst cardinal_to_dir = {\n  'N': 0,\n  'E': 1,\n  'S': 2,\n  'W': 3\n};\nconst arrow_to_dir = {\n  'ArrowUp': 0,\n  'ArrowRight': 1,\n  'ArrowDown': 2,\n  'ArrowLeft': 3\n};\nclass Map {\n  static create_basic_point() {\n    return {\n      'used': false,\n      'borders': [false, false, false, false],\n      'input': '',\n      'general': '',\n      'scripts': '',\n      'images': '',\n      'terrains': new Set()\n    };\n  }\n\n  //TODO: old version files: change everything... somehow\n  terrainer(points_data) {\n    for (var signature in points_data) {\n      if (!('terrains' in points_data[signature])) {\n        points_data[signature]['terrains'] = new Set();\n        if ('desert' in points_data[signature] && points_data[signature]['desert']) points_data[signature]['terrains'].add('desert');\n        if ('water' in points_data[signature] && points_data[signature]['water']) points_data[signature]['terrains'].add('water');\n      } else points_data[signature]['terrains'] = new Set(points_data[signature]['terrains']);\n    }\n    return points_data;\n  }\n  get_map_size() {\n    var all_points = Object.keys(this.point_data).map(x => x.split(' ').map(y => Number(y)));\n    var max_x = 0,\n      max_y = 0;\n    for (var coordinates of all_points) {\n      if (coordinates[0] > max_y) max_y = coordinates[0];\n      if (coordinates[1] > max_x) max_x = coordinates[1];\n    }\n    return [max_y + 1, max_x + 1];\n  }\n  initialize_map_data() {\n    var map_size = this.general_data['map size'];\n    this.points_data = {};\n    for (var row_nr = 0; row_nr < map_size[0]; row_nr += 1) {\n      for (var column_nr = 0; column_nr < map_size[1]; column_nr += 1) {\n        this.points_data[`${row_nr} ${column_nr}`] = Map.create_basic_point();\n      }\n    }\n  }\n  construct_from_data(full_data) {\n    var _map_gd = this.general_data;\n    _map_gd['ground truth'] = full_data['ground truth'];\n    _map_gd['fly'] = full_data['fly'];\n    _map_gd['teleport'] = full_data['teleport'];\n    _map_gd['order'] = full_data['order'];\n    _map_gd['exploration_blobber'] = full_data['exploration_blobber'] ?? true;\n    _map_gd['map general'] = full_data['map general'] ?? '';\n    this.points_data = this.terrainer(full_data['points']);\n    _map_gd['map size'] = full_data['map size'] ?? this.get_map_size();\n  }\n  construct_from_nothing(grid_size) {\n    var _map_gd = this.general_data;\n    _map_gd['ground truth'] = false;\n    _map_gd['fly'] = \"\";\n    _map_gd['teleport'] = \"\";\n    _map_gd['order'] = \"\";\n    _map_gd['exploration_blobber'] = true;\n    _map_gd['map size'] = [grid_size[0], grid_size[1]]; //TODO: Defaulting\n  }\n\n  //proper_data fields: title, full_data, local_grid_default (ignored if full_data)\n  constructor(proper_data) {\n    this.title = proper_data.map_name;\n    this.is_map_changed = false;\n    this.general_data = {};\n    if (proper_data.full_data) this.construct_from_data(proper_data.full_data);else this.construct_from_nothing(proper_data.grid_size);\n  }\n}\nclass Application {\n  checkboxes_terrains() {\n    var terrains_div = document.getElementById('terrains');\n    for (var terrain in this._local_terrains) {\n      var _input = document.createElement('input');\n      _input.type = 'checkbox';\n      _input.name = terrain;\n      _input.id = terrain;\n      var _label = document.createElement('label');\n      _label.innerHTML = terrain[0].toUpperCase() + terrain.slice(1);\n      _label.htmlFor = terrain;\n      terrains_div.appendChild(_input);\n      terrains_div.appendChild(_label);\n      this.controls['terrains'][terrain] = _input;\n    }\n  }\n  update_presentation(current_state) {\n    if (!this.current_state['marked']) return;\n    this.current_state['marked']._arrow.innerHTML = dir_to_arrow[this.current_state.direction];\n  }\n  set_changer(map) {\n    if (map == '_unknown') return;\n    if (this.maps[map]['is_map_changed']) this.map_element_overlays[map]._changer.style.backgroundColor = '#88CC00';else this.map_element_overlays[map]._changer.style.backgroundColor = 'rgba(0,0,0,0)';\n  }\n  changer(map = null) {\n    if (map == null) map = this.current_state.map;\n    if (map == '_unknown') return;\n    this.maps[map]['is_map_changed'] = true;\n    this.set_changer(map);\n  }\n  dechanger(map = null) {\n    if (map == null) map = this.current_state.map;\n    if (map == '_unknown') return;\n    this.maps[map]['is_map_changed'] = false;\n    this.set_changer(map);\n  }\n  proper_background(point_data, signature) {\n    if (point_data.used) this.points[signature].style['backgroundColor'] = 'white';else this.points[signature].style['backgroundColor'] = 'grey';\n    for (var terrain in this._local_terrains) {\n      if (point_data['terrains'].has(terrain)) this.points[signature].style.backgroundColor = this._local_terrains[terrain]['color'];\n    }\n  }\n  update_field(signature) {\n    var to_load = this.maps[this.current_state.map]['points_data'];\n    for (var i = 0; i < 4; i += 1) {\n      if (to_load[signature].borders[i]) this.points[signature].style[`border${dir_to_border[i]}`] = `1px dashed #CCCCCC`;else this.points[signature].style[`border${dir_to_border[i]}`] = '1px solid black';\n    }\n    this.proper_background(to_load[signature], signature);\n    this.points[signature]._input.innerHTML = to_load[signature].input;\n    for (var _ of [0, 1, 2, 3]) {\n      for (var minor in [0, 1]) {\n        this.points[signature]._teleports._mini_teleports[_]._minors[minor].style.background = 'rgba(0, 0, 0, 0)';\n      }\n    }\n    this.points[signature]._teleports._mini_teleports[4].style.background = 'rgba(0, 0, 0, 0)';\n    if (to_load[signature].scripts) {\n      var scripts = to_load[signature].scripts.split('\\n');\n      for (var script of scripts) {\n        if (script == 'undefined') continue;\n        var proper_script = script.split(';');\n        var color = '#AA0000'; //For W, WS\n        if (proper_script[0] == 'P') color = '#008055';\n        if (proper_script[0] == 'R') color = '#9900E6';\n        var direction = proper_script[1];\n        var base_teleport = this.points[signature]._teleports;\n        if (direction && direction.includes('N') || proper_script[0] == 'T') {\n          var mini_teleports = base_teleport._mini_teleports[cardinal_to_dir['N']];\n          mini_teleports._minors[0].style.background = `linear-gradient(to right bottom, rgba(0, 0, 0, 0) 50%, ${color} 50%)`;\n          mini_teleports._minors[1].style.background = `linear-gradient(to right top, ${color} 50%, rgba(0, 0, 0, 0) 50%)`;\n        }\n        if (direction && direction.includes('S') || proper_script[0] == 'T') {\n          var mini_teleports = base_teleport._mini_teleports[cardinal_to_dir['S']];\n          mini_teleports._minors[0].style.background = `linear-gradient(to right top, rgba(0, 0, 0, 0) 50%, ${color} 50%)`;\n          mini_teleports._minors[1].style.background = `linear-gradient(to right bottom, ${color} 50%, rgba(0, 0, 0, 0) 50%)`;\n        }\n        if (direction && direction.includes('W') || proper_script[0] == 'T') {\n          var mini_teleports = base_teleport._mini_teleports[cardinal_to_dir['W']];\n          mini_teleports._minors[0].style.background = `linear-gradient(to right bottom, rgba(0, 0, 0, 0) 50%, ${color} 50%)`;\n          mini_teleports._minors[1].style.background = `linear-gradient(to right top, rgba(0, 0, 0, 0) 50%, ${color} 50%)`;\n        }\n        if (direction && direction.includes('E') || proper_script[0] == 'T') {\n          var mini_teleports = base_teleport._mini_teleports[cardinal_to_dir['E']];\n          mini_teleports._minors[0].style.background = `linear-gradient(to right top, ${color} 50%, rgba(0, 0, 0, 0) 50%)`;\n          mini_teleports._minors[1].style.background = `linear-gradient(to right bottom, ${color} 50%, rgba(0, 0, 0, 0) 50%)`;\n        }\n        if (proper_script[0] == 'R' || proper_script[0] == 'T') this.points[signature]._teleports._mini_teleports[4].style.background = color;\n      }\n    }\n  }\n  update_part(map_name, movement, element) {\n    var _map_gd = this.maps[map_name]['general_data'];\n    if (!_map_gd[movement] || _map_gd[movement] == '') element.style.display = 'none';else if (_map_gd[movement] != 'undefined') {\n      element.style.display = 'inline-block';\n      element.onmouseover = function () {\n        this.style.backgroundColor = '#440000';\n      };\n      element.onmouseout = function () {\n        this.style.backgroundColor = '#880000';\n      };\n      element._entry = this;\n      element.onclick = function () {\n        var base = this._entry;\n        var new_direction, new_place;\n        if (this._type == 'F') {\n          new_direction = base.current_state.direction;\n          if (new_direction == -1) new_direction = 0; //By default - northern\n          new_place = _map_gd[movement];\n        } else {\n          var _tmp = _map_gd[movement].split(';');\n          new_direction = cardinal_to_dir[_tmp[1]];\n          new_place = _tmp[0];\n        }\n        base.change_map(this._overlay._element._map_name);\n        base.current_state.direction = new_direction;\n        base.current_state.marked = base.points[new_place];\n        base.update_presentation(base.current_state);\n      };\n    }\n  }\n  update_flight(map_name) {\n    if (map_name == '_unknown') return;\n    this.update_part(map_name, 'fly', this.map_element_overlays[map_name]._flier);\n    this.update_part(map_name, 'teleport', this.map_element_overlays[map_name]._teleporter);\n  }\n  save_focus(map_switch = false) {\n    if (this.current_focus) {\n      var coordinate = this.current_focus._signature;\n      var past_point = Object.assign({}, this.maps[this.current_state.map]['points_data'][coordinate]);\n      this.maps[this.current_state.map]['points_data'][coordinate]['general'] = this.controls.general_text.value;\n      this.maps[this.current_state.map]['points_data'][coordinate]['scripts'] = this.controls.scripts_text.value;\n      this.maps[this.current_state.map]['points_data'][coordinate]['images'] = this.controls.images_text.value;\n      this.maps[this.current_state.map]['points_data'][coordinate]['input'] = this.controls.shorthand_text.value;\n      for (var terrain in this._local_terrains) {\n        if (this.controls['terrains'][terrain].checked) this.maps[this.current_state.map]['points_data'][coordinate]['terrains'].add(terrain);else this.maps[this.current_state.map]['points_data'][coordinate]['terrains'].delete(terrain);\n      }\n      this.maps[this.current_state.map]['points_data'][coordinate].used = this.controls.input_used.checked;\n      var ordering = ['N', 'E', 'S', 'W'];\n      for (var index of [0, 1, 2, 3]) {\n        this.maps[this.current_state.map]['points_data'][coordinate].borders[cardinal_to_dir[ordering[index]]] = this.controls.input_borders[index].checked;\n      }\n      if (Object.entries(this.maps[this.current_state.map]['points_data'][coordinate]).sort().toString() !== Object.entries(past_point).sort().toString()) this.changer();\n      if (!map_switch) this.update_field(coordinate);\n    }\n  }\n\n  //TODO: Can be sped up\n  redefine_map_size(map_data, new_map_size, old_map_size) {\n    var new_x = new_map_size[1],\n      new_y = new_map_size[0];\n    var old_x = old_map_size[1],\n      old_y = old_map_size[0];\n    var max_x = Math.max(new_x, old_x);\n    var max_y = Math.max(new_y, old_y);\n    var min_x = Math.min(new_x, old_x);\n    var min_y = Math.min(new_y, old_y);\n    for (var y = 0; y < max_y; y++) {\n      for (var x = 0; x < max_x; x++) {\n        if (y < min_y && x < min_x) continue;\n        if (x < new_x && y < new_y) map_data[`${y} ${x}`] = Map.create_basic_point();else if (x < old_x && y < old_y) delete map_data[`${y} ${x}`];\n      }\n    }\n  }\n  save_map_data() {\n    this.save_focus(true);\n    var _map_gd = this.maps[this.current_state.map]['general_data'];\n    _map_gd['order'] = this.controls.order.value;\n    _map_gd['ground truth'] = this.controls.ground_truth.checked;\n    _map_gd['fly'] = this.controls.fly.value;\n    _map_gd['teleport'] = this.controls.teleport.value;\n    _map_gd['exploration_blobber'] = this.controls.blobber.checked;\n    var old_map_size = _map_gd['map size'];\n    _map_gd['map size'] = this.controls.map_size.value.split(',').map(x => Number(x));\n    if (old_map_size && (old_map_size[0] != _map_gd['map size'][0] || old_map_size[1] != _map_gd['map size'][1]) && this.current_state.map != '_unknown') this.redefine_map_size(this.maps[this.current_state.map]['points_data'], _map_gd['map size'], old_map_size);\n    _map_gd['map general'] = this.controls.map_general.value;\n  }\n  load_map_presentation(to_load, map_name) {\n    this.current_state['map'] = map_name;\n    this.resize_grid(this.maps[map_name]['general_data']['map size']);\n    var _map_gd = this.maps[this.current_state.map]['general_data'];\n    this.controls.ground_truth.checked = _map_gd['ground truth'];\n    this.controls.fly.value = _map_gd['fly'];\n    this.controls.teleport.value = _map_gd['teleport'] ?? '';\n    this.controls.map_size.value = _map_gd['map size'];\n    this.controls.blobber.checked = _map_gd['exploration_blobber'];\n    this.controls.overhead.checked = !_map_gd['exploration_blobber'];\n    this.controls.map_general.value = _map_gd['map general'] ?? '';\n    this.controls.order.value = _map_gd['order'] ?? '';\n    for (var coordinates in to_load) this.update_field(coordinates);\n    if (this.current_state['marked']) {\n      this.current_state['marked']._arrow.innerHTML = \"\";\n      this.current_state.marked = null;\n      this.current_state.direction = -1;\n    }\n  }\n  change_map(new_map) {\n    this.save_map_data();\n    if (this.current_focus) {\n      this.current_focus._marking.style.background = 'rgba(0, 0, 0, 0)';\n      this.current_focus = null;\n    }\n    if (this.map_element_overlays[this.current_state.map]) {\n      this.map_element_overlays[this.current_state.map]._element.style.backgroundColor = '#880000';\n    }\n    this.map_element_overlays[new_map]._element.style.backgroundColor = '#000000';\n    this.update_flight(this.current_state.map);\n    this.current_state['map'] = new_map;\n    this.load_map_presentation(this.maps[new_map]['points_data'], new_map);\n    this.controls.map_name.value = new_map;\n  }\n  rename_map(old_map_name, new_map_name) {\n    if (this.map_element_overlays[old_map_name]) {\n      this.map_element_overlays[old_map_name]._element.innerHTML = new_map_name;\n      this.map_element_overlays[old_map_name]._element._map_name = new_map_name;\n      this.maps[new_map_name] = this.maps[old_map_name];\n      delete this.maps[old_map_name];\n      this.map_element_overlays[new_map_name] = this.map_element_overlays[old_map_name];\n      delete this.map_element_overlays[old_map_name];\n    }\n    if (this.current_state.map == old_map_name) this.current_state.map = new_map_name;\n  }\n  create_movement_overlay(letter) {\n    var flier = document.createElement('div');\n    (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(flier, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.map_element_style);\n    flier.style.width = \"50px\";\n    flier.innerHTML = letter;\n    flier._type = letter;\n    flier.style.display = \"none\";\n    return flier;\n  }\n  create_new_map_overlay(map_name) {\n    var map_overlay = document.createElement('div');\n    var new_map_element = document.createElement('div');\n    new_map_element.id = `__map ${map_name}`;\n    var flier = this.create_movement_overlay('F');\n    var teleporter = this.create_movement_overlay('T');\n    var changer = document.createElement('div');\n    var text = document.createElement('span');\n    map_overlay.classList.add('map_overlay');\n    (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(changer, {\n      'position': 'absolute',\n      'backgroundColor': 'rgba(0, 0, 0, 0)',\n      'top': '5px',\n      'right': '5px',\n      'width': '15px',\n      'height': '15px',\n      'borderRadius': '100%'\n    });\n    new_map_element._map_name = map_name;\n    text.textContent = map_name;\n    new_map_element.appendChild(changer);\n    new_map_element._entry = this;\n    new_map_element.onclick = function () {\n      var base = this._entry;\n      base.change_map(this._map_name);\n    };\n    new_map_element.onmouseover = function () {\n      var base = this._entry;\n      if (base.current_state.map != this._map_name) this.style['backgroundColor'] = '#440000';\n    };\n    new_map_element.onmouseout = function () {\n      var base = this._entry;\n      if (base.current_state.map != this._map_name) this.style['backgroundColor'] = '#880000';\n    };\n    (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(new_map_element, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.map_element_style);\n    new_map_element.style.position = 'relative';\n    map_overlay.appendChild(new_map_element);\n    map_overlay.appendChild(flier);\n    map_overlay.appendChild(teleporter);\n    new_map_element.appendChild(text);\n    map_overlay._text = text;\n    map_overlay._element = new_map_element;\n    map_overlay._changer = changer;\n    map_overlay._flier = flier;\n    map_overlay._flier._overlay = map_overlay;\n    map_overlay._teleporter = teleporter;\n    map_overlay._teleporter._overlay = map_overlay;\n    return map_overlay;\n  }\n  create_data_dump() {\n    var map_name = this.current_state['map'];\n    this.save_map_data();\n    var save_data = this.maps[map_name]['general_data'];\n    var to_save = {\n      'title': map_name,\n      'ground truth': save_data['ground truth'],\n      'fly': save_data['fly'],\n      'exploration_blobber': save_data['exploration_blobber'],\n      'teleport': save_data['teleport'],\n      'map size': save_data['map size'],\n      'map general': save_data['map general'],\n      'order': save_data['order'],\n      'points': {}\n    };\n    for (var point_coordinate in this.maps[map_name]['points_data']) {\n      var point = this.maps[map_name]['points_data'][point_coordinate];\n      var terrains = [...point.terrains];\n      to_save.points[point_coordinate] = {\n        'used': point.used,\n        'borders': point.borders,\n        'input': point.input,\n        //Move to shorthand\n        'general': point.general ?? '',\n        'scripts': point.scripts ?? '',\n        'images': point.images ?? '',\n        'terrains': [...point.terrains]\n      };\n    }\n    return to_save;\n  }\n  resize_grid(new_size) {\n    var size_y = new_size[0];\n    var size_x = new_size[1];\n    for (var y = 0; y < this.GRID_SIZE[0]; y++) {\n      if (y < size_y) this.presentation['row_labels'][y].style.display = 'inline-block';else this.presentation['row_labels'][y].style.display = 'none';\n      for (var x = 0; x < this.GRID_SIZE[1]; x++) {\n        if (x < size_x && y < size_y) this.points[`${y} ${x}`].style.display = 'inline-block';else this.points[`${y} ${x}`].style.display = 'none';\n      }\n    }\n    for (var x = 0; x < this.GRID_SIZE[1]; x++) {\n      if (x < size_x) this.presentation['column_labels'][x].style.display = 'inline-block';else this.presentation['column_labels'][x].style.display = 'none';\n    }\n  }\n  create_grid(grid_size) {\n    var points = {};\n    var row_with_labels = document.createElement('div');\n    var basis = document.getElementById('map_proper');\n    var wonder_golden = '#B37700';\n    row_with_labels.style['position'] = 'sticky';\n    row_with_labels.style['top'] = '0';\n    var point_of_entry = document.createElement('div');\n    (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(point_of_entry, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.standard_style);\n    (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(point_of_entry, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.point_of_entry_style);\n    point_of_entry.innerHTML = 'y\\\\x';\n    row_with_labels.appendChild(point_of_entry);\n    this.presentation['column_labels'] = {};\n    for (var column_nr = 0; column_nr < grid_size[1]; column_nr += 1) {\n      var column_label = document.createElement('div');\n      column_label.innerHTML = `${column_nr}`;\n      (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(column_label, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.standard_style);\n      column_label.style['backgroundColor'] = wonder_golden;\n      column_label.style['height'] = '50px';\n      column_label.style['lineHeight'] = '50px';\n      this.presentation['column_labels'][column_nr] = column_label;\n      row_with_labels.appendChild(column_label);\n    }\n    basis.appendChild(row_with_labels);\n    this.presentation['row_labels'] = {};\n    var row_start = grid_size[0] - 1,\n      row_end = -1,\n      row_diff = -1;\n    if (this.ascending_y) {\n      row_start = 0;\n      row_end = grid_size[0];\n      row_diff = 1;\n    }\n    for (var row_nr = row_start; row_nr != row_end; row_nr += row_diff) {\n      var row = document.createElement('div');\n      basis.appendChild(row);\n      var row_label = document.createElement('div');\n      (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(row_label, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.standard_style);\n      row_label.style['backgroundColor'] = wonder_golden;\n      row_label.style['width'] = '50px';\n      row_label.innerHTML = `${row_nr}`;\n      this.presentation['row_labels'][row_nr] = row_label;\n      row.appendChild(row_label);\n      for (var column_nr = 0; column_nr < grid_size[1]; column_nr += 1) {\n        var point = document.createElement('div');\n        var input_part = document.createElement('div');\n        var arrow_part = document.createElement('div');\n        var marking = document.createElement('div');\n        var teleports = document.createElement('div');\n        var north_teleport = document.createElement('div');\n        var south_teleport = document.createElement('div');\n        var west_teleport = document.createElement('div');\n        var east_teleport = document.createElement('div');\n        var mid_teleport = document.createElement('div');\n        point.appendChild(arrow_part);\n        point.appendChild(input_part);\n        point.appendChild(marking);\n        point.appendChild(teleports);\n        teleports._mini_teleports = [north_teleport, east_teleport, south_teleport, west_teleport, mid_teleport];\n        for (var mini_teleport of teleports._mini_teleports) {\n          teleports.appendChild(mini_teleport);\n          (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(mini_teleport, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.mini_teleport_style);\n        }\n        mid_teleport.style.borderRadius = '100%';\n        mid_teleport.style.top = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport}px`;\n        mid_teleport.style.left = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport}px`;\n        var n_left = document.createElement('div');\n        var n_right = document.createElement('div');\n        var s_left = document.createElement('div');\n        var s_right = document.createElement('div');\n        var e_top = document.createElement('div');\n        var e_bottom = document.createElement('div');\n        var w_top = document.createElement('div');\n        var w_bottom = document.createElement('div');\n        north_teleport._minors = [n_left, n_right];\n        south_teleport._minors = [s_left, s_right];\n        west_teleport._minors = [w_top, w_bottom];\n        east_teleport._minors = [e_top, e_bottom];\n        for (var mini_teleport of teleports._mini_teleports.slice(0, -1)) {\n          for (var minor of mini_teleport._minors) {\n            mini_teleport.appendChild(minor);\n          }\n        }\n        for (var mini_teleport of [north_teleport, south_teleport]) {\n          for (var minor of mini_teleport._minors) {\n            (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(minor, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.mini_teleport_style);\n            minor.style.width = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport / 2}px`;\n          }\n          mini_teleport._minors[1].style.left = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport / 2}px`;\n        }\n        for (var mini_teleport of [east_teleport, west_teleport]) {\n          for (var minor of mini_teleport._minors) {\n            (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(minor, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.mini_teleport_style);\n            minor.style.height = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport / 2}px`;\n          }\n          mini_teleport._minors[1].style['top'] = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport / 2}px`;\n        }\n        north_teleport.style['left'] = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport}px`;\n        south_teleport.style['left'] = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport}px`;\n        south_teleport.style['top'] = `${2 * _presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport}px`;\n        west_teleport.style['top'] = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport}px`;\n        east_teleport.style['top'] = `${_presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport}px`;\n        east_teleport.style['left'] = `${2 * _presentation_js__WEBPACK_IMPORTED_MODULE_2__.single_distance_teleport}px`;\n        point._arrow = arrow_part;\n        point._input = input_part;\n        point._marking = marking;\n        point._teleports = teleports;\n        (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(point, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.standard_style);\n        (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(marking, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.standard_style);\n        (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(marking, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.marking_style);\n        (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(teleports, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.standard_style);\n        (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(teleports, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.marking_style);\n        (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(teleports, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.teleports_style);\n        (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(point._arrow, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.standard_style);\n        (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(point._arrow, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.arrowy_style);\n        (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(point._input, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.inputter_style);\n        point._coordinates = {\n          'row': row_nr,\n          'column': column_nr\n        };\n        point._signature = `${point._coordinates.row} ${point._coordinates.column}`;\n        point.id = `__sig ${point._signature}`;\n        points[`${row_nr} ${column_nr}`] = point;\n        point._entry = this;\n        point.addEventListener(_config_js__WEBPACK_IMPORTED_MODULE_0__._CONFIG_ACCESS_POINT_DATA, function (_event) {\n          var base = this._entry;\n          if (_config_js__WEBPACK_IMPORTED_MODULE_0__._CONFIG_ACCESS_POINT_DATA == 'contextmenu') _event.preventDefault();\n          point_images.innerHTML = '';\n          if (base.current_focus) {\n            base.current_focus._marking.style.background = 'rgba(0, 0, 0, 0)';\n            base.save_focus();\n            base.current_focus._input.innerHTML = shorthand_text.value;\n          }\n          base.current_focus = this;\n          base.current_focus._marking.style.background = 'linear-gradient(to right bottom, #AA0000 50%, rgba(0, 0, 0, 0) 50%)';\n          base.controls.images_text.value = base.maps[base.current_state.map]['points_data'][base.current_focus._signature].images;\n          base.controls.scripts_text.value = base.maps[base.current_state.map]['points_data'][base.current_focus._signature].scripts;\n          base.controls.shorthand_text.value = base.maps[base.current_state.map]['points_data'][base.current_focus._signature].input;\n          base.controls.general_text.value = base.maps[base.current_state.map]['points_data'][base.current_focus._signature].general;\n          for (var terrain in base._local_terrains) {\n            if (base.maps[base.current_state.map]['points_data'][base.current_focus._signature]['terrains'].has(terrain)) base.controls['terrains'][terrain].checked = true;else base.controls['terrains'][terrain].checked = false;\n          }\n          base.controls.input_used.checked = base.maps[base.current_state.map]['points_data'][base.current_focus._signature].used;\n          var ordering = ['N', 'E', 'S', 'W'];\n          for (var index of [0, 1, 2, 3]) {\n            base.controls.input_borders[index].checked = base.maps[base.current_state.map]['points_data'][base.current_focus._signature].borders[cardinal_to_dir[ordering[index]]];\n          }\n          for (var image of base.maps[base.current_state.map]['points_data'][base.current_focus._signature].images.split('\\n')) {\n            if (image) {\n              var pic = document.createElement('img');\n              pic.src = '../' + _config_js__WEBPACK_IMPORTED_MODULE_0__._CONFIG_PREFIX + image;\n              pic.alt = \"image should be here\";\n              pic.width = \"600\";\n              point_images.appendChild(pic);\n            }\n          }\n        });\n        point.addEventListener('click', function () {\n          var base = this._entry;\n          if (base.controls.ground_truth.checked && !base.maps[base.current_state.map]['points_data'][this._signature].used) return;\n          if (base.current_state.marked) base.current_state.marked._arrow.innerHTML = '';\n          base.current_state.direction = 0;\n          this._arrow.innerHTML = dir_to_arrow[base.current_state.direction];\n          base.current_state.marked = this;\n          var data_to_push = [];\n          if (!base.maps[base.current_state.map]['points_data'][this._signature].used) {\n            if (base.map_element_overlays[base.current_state.map]) base.changer();\n            base.maps[base.current_state.map]['points_data'][this._signature].used = true;\n            base.proper_background(base.maps[base.current_state.map]['points_data'][this._signature], this._signature);\n            data_to_push.push([0, this._signature]);\n          }\n          base.subsequent_changes.push([Object.assign({}, base.current_state), data_to_push]);\n          base.update_presentation(base.current_state);\n        });\n        row.appendChild(point);\n      }\n    }\n    return points;\n  }\n  create_map_adder() {\n    var add_map = this.controls.map_adder_input;\n    (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(add_map, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.map_element_style);\n    add_map.style['backgroundColor'] = '#008800';\n    add_map.placeholder = 'Map name';\n    var map_adder = this.controls.map_adder_button;\n    (0,_presentation_js__WEBPACK_IMPORTED_MODULE_2__.assign_style_to_element)(map_adder, _presentation_js__WEBPACK_IMPORTED_MODULE_2__.map_element_style);\n    map_adder.style['backgroundColor'] = '#008800';\n    map_adder.style['display'] = 'inline-block';\n    map_adder.style['width'] = '80px';\n    map_adder.innerHTML = '+';\n    map_adder._entry = this;\n    map_adder.onclick = function () {\n      var base = this._entry;\n      var map_name = add_map.value;\n      base.maps[map_name] = new Map({\n        'title': map_name,\n        'grid_size': base._local_grid_default\n      });\n      var map_overlay = base.create_new_map_overlay(map_name);\n      base.map_element_overlays[map_name] = map_overlay;\n      base.controls.maps_list.appendChild(map_overlay);\n      base.maps[map_name].initialize_map_data();\n      base.change_map(map_name);\n    };\n  }\n  enforce_new_state(new_state) {\n    if (this.current_state.map != new_state.map) this.change_map(new_state.map);\n    if ('direction' in new_state) this.current_state.direction = new_state.direction;\n    if (this.current_state.marked) this.current_state.marked._arrow.innerHTML = '';\n    this.current_state.marked = this.points[new_state.signature];\n    this.update_presentation(this.current_state);\n  }\n\n  //direction - as int, moves - amount of moves towards given direction -> resulting Signature\n  move_in_direction(signature, direction_int, moves = 1) {\n    var descend = this.ascending_y ? -1 : 1,\n      row,\n      column;\n    [row, column] = signature.split(' ').map(x => Number(x));\n    return `${row + moves * integer_to_dir[direction_int].y * descend} ${column + moves * integer_to_dir[direction_int].x}`;\n  }\n  determine_next_map(map_name) {\n    if (map_name[0] == '_') {\n      if (map_name == '_S') return this.current_state.map;\n      current_name_split = this.current_state.map.split(' ');\n      last = Number(current_name_split[current_name_split.length - 1]);\n      if (map_name == '_UP') to_add = 1;else to_add = -1;\n      current_name_split[current_name_split.length - 1] = (last + to_add).toString();\n      return current_name_split.join(' ');\n    }\n    return map_name;\n  }\n  determine_next_signature(signature) {\n    if (signature == '_P') return this.current_state.marked._signature;\n    return signature;\n  }\n  determine_next_direction(direction) {\n    if (typeof direction == 'number') return direction;\n    if (direction == 'R') return (this.current_state.direction + 2) % 4;\n    return cardinal_to_dir[direction];\n  }\n  create_next_state(map, signature, direction) {\n    return {\n      'map': this.determine_next_map(map),\n      'signature': this.determine_next_signature(signature),\n      'direction': this.determine_next_direction(direction)\n    };\n  }\n\n  //start can be inferred from direction\n  //start, end - both cells; if start + direction unspecified: border not changed\n  penetrate(end, direction = -1, start = null) {\n    var new_place_presentation = this.points[end];\n    var new_place_data = this.maps[this.current_state.map]['points_data'][end];\n    var old_place_presentation = this.points[start];\n    var old_place_data = this.maps[this.current_state.map]['points_data'][start];\n    var changes = [];\n    if (!new_place_data.used) {\n      new_place_data.used = true;\n      changes.push([0, end]);\n      new_place_presentation.style['backgroundColor'] = 'white';\n      if (this.current_focus && this.current_focus._signature == end) this.controls.input_used.checked = true;\n    }\n    if (start && !this.maps[this.current_state.map]['points_data'][start].borders[direction]) {\n      this.current_state.marked.style[`border${dir_to_border[direction]}`] = `1px dashed #CCCCCC`;\n      this.maps[this.current_state.map]['points_data'][start].borders[direction] = true;\n      changes.push([1, start, direction]);\n      if (this.current_focus && this.current_focus._signature == start) this.controls.input_borders[direction].checked = true;\n      new_place_presentation.style[`border${dir_to_border[(direction + 2) % 4]}`] = `1px dashed #CCCCCC`;\n      new_place_data.borders[(direction + 2) % 4] = true;\n      changes.push([1, end, (direction + 2) % 4]);\n      if (this.current_focus && this.current_focus._signature == end) this.controls.input_borders[(direction + 2) % 4].checked = true;\n    }\n    return changes;\n  }\n  process_overhead_move(e_key) {\n    var changes_introduced = [];\n    var direction = arrow_to_dir[e_key];\n    var new_place_signature = this.move_in_direction(this.current_state.marked._signature, direction);\n    var new_place_data = this.maps[this.current_state.map]['points_data'][new_place_signature];\n    if (new_place_data && (!this.controls.ground_truth.checked || new_place_data.used && this.maps[this.current_state.map]['points_data'][this.current_state.marked._signature].borders[direction])) {\n      if (!this.controls.ground_truth.checked) {\n        changes_introduced.push(...this.penetrate(new_place_signature, direction, this.current_state.marked._signature));\n      }\n      this.enforce_new_state({\n        'map': this.current_state.map,\n        'signature': new_place_signature,\n        'direction': this.current_state.direction\n      });\n    }\n    return changes_introduced;\n  }\n\n  //Returns: [change]; new state established immediately\n  process_move_forward(e_key) {\n    var current_place = this.current_state.marked._coordinates;\n    var direction_int = this.current_state.direction;\n    var direction = integer_to_dir[this.current_state.direction];\n    var changes_introduced = [];\n    var direction_proper = e_key == 'ArrowUp' ? direction_int : (direction_int + 2) % 4;\n    if (this.maps[this.current_state.map]['points_data'][this.current_state.marked._signature]['scripts']) {\n      var partial_scripts = this.maps[this.current_state.map]['points_data'][this.current_state.marked._signature]['scripts'].split('\\n');\n      for (var script of partial_scripts) {\n        var proper_script = script.split(';');\n        if (proper_script[0] == 'W' && proper_script[1] == dir_to_cardinal[direction_proper]) {\n          var old_direction = this.current_state.direction;\n          this.enforce_new_state(this.create_next_state(proper_script[2], proper_script[3], proper_script[4] ?? old_direction));\n          return [];\n        }\n        if (proper_script[0] == 'WS' && proper_script[1] == dir_to_cardinal[direction_proper]) {\n          var old_direction = this.current_state.direction;\n          var ln = this.current_state.map.length;\n          var map_column = this.current_state.map.charCodeAt(ln - 2);\n          var map_row = this.current_state.map.charCodeAt(ln - 1);\n          var start = this.current_state.map.substring(0, ln - 2);\n          var coordinate_x = this.current_state.marked._coordinates['column'];\n          var coordinate_y = this.current_state.marked._coordinates['row'];\n          if (proper_script[1] == 'N') {\n            coordinate_y = 0;\n            map_row = map_row - 1;\n          }\n          if (proper_script[1] == 'S') {\n            coordinate_y = 15;\n            map_row = map_row + 1;\n          }\n          if (proper_script[1] == 'W') {\n            coordinate_x = 15;\n            map_column = map_column - 1;\n          }\n          if (proper_script[1] == 'E') {\n            coordinate_x = 0;\n            map_column = map_column + 1;\n          }\n          map_row = String.fromCharCode(map_row);\n          map_column = String.fromCharCode(map_column);\n          this.enforce_new_state({\n            'map': `${start}${map_column}${map_row}`,\n            'signature': `${coordinate_y} ${coordinate_x}`,\n            'direction': old_direction\n          });\n          return [];\n        }\n      }\n    }\n    var new_place_signature = this.move_in_direction(this.current_state.marked._signature, direction_proper);\n    var new_place_presentation = this.points[new_place_signature];\n    var new_place_data = this.maps[this.current_state.map]['points_data'][new_place_signature];\n    if (new_place_data && (!this.controls.ground_truth.checked || new_place_data.used && this.maps[this.current_state.map]['points_data'][this.current_state.marked._signature].borders[direction_proper])) {\n      if (!this.controls.ground_truth.checked) {\n        changes_introduced.push(...this.penetrate(new_place_signature, direction_proper, this.current_state.marked._signature));\n      }\n      if (new_place_data && new_place_data['scripts']) {\n        var partial_scripts = new_place_data['scripts'].split('\\n');\n        for (var script of partial_scripts) {\n          var proper_script = script.split(';');\n          if (proper_script[0] == 'T') {\n            this.enforce_new_state(this.create_next_state(proper_script[1], proper_script[2], this.current_state.direction));\n            return changes_introduced;\n          }\n        }\n      }\n      this.enforce_new_state({\n        'map': this.current_state.map,\n        'signature': new_place_signature,\n        'direction': this.current_state.direction\n      });\n    }\n    return changes_introduced;\n  }\n  constructor() {\n    this.controls = {\n      'map_name': document.getElementById('map_name'),\n      'general_text': document.getElementById('general_text'),\n      'scripts_text': document.getElementById('scripts_text'),\n      'images_text': document.getElementById('images_text'),\n      'point_images': document.getElementById('point_images'),\n      'rename': document.getElementById('rename'),\n      'save_name': document.getElementById('save_name'),\n      'shorthand_text': document.getElementById('shorthand_text'),\n      'fly': document.getElementById('fly'),\n      'teleport': document.getElementById('teleport'),\n      'maps_list': document.getElementById(\"maps_list\"),\n      'ground_truth': document.getElementById(\"ground_truth\"),\n      'map_general': document.getElementById('map_general'),\n      'terrains': {},\n      'input_used': document.getElementById(\"usable\"),\n      'input_borders': [\"North\", \"East\", \"South\", \"West\"].map(direction => document.getElementById(`${direction}_border`)),\n      'order': document.getElementById('order'),\n      'map_size': document.getElementById('map_size'),\n      'orderer': document.getElementById('orderer'),\n      'blobber': document.getElementById('model_blobber'),\n      'overhead': document.getElementById('model_overhead'),\n      'map_adder_input': document.getElementById('map_adder_input'),\n      'map_adder_button': document.getElementById('map_adder_button')\n    };\n    this.checkboxes_terrains();\n    this.map_element_overlays = {};\n    this.current_state = {\n      'marked': null,\n      'direction': -1,\n      'map': '_unknown'\n    };\n    this.current_focus = null;\n    this.presentation = {};\n    this.GRID_SIZE = [_config_js__WEBPACK_IMPORTED_MODULE_0__._CONFIG_MAX_MAP_SIZE, _config_js__WEBPACK_IMPORTED_MODULE_0__._CONFIG_MAX_MAP_SIZE];\n    this.maps = {};\n    this.maps[this.current_state.map] = new Map({\n      'title': '_unknown',\n      'grid_size': this.GRID_SIZE\n    });\n    this.maps[this.current_state.map].initialize_map_data();\n    this._game_config = _game_terrain_js__WEBPACK_IMPORTED_MODULE_1__.GAME_DATA[_config_js__WEBPACK_IMPORTED_MODULE_0__._CONFIG_GAME];\n    this._local_terrains = this._game_config['terrains'];\n    this.ascending_y = false;\n    this.revert = false;\n    if ('y_order' in this._game_config && this._game_config['y_order'] == 'ascending') this.ascending_y = true;\n    if ('backspace' in this._game_config && this._game_config['backspace'] == 'revert') this.revert = true;\n    if ('default map size' in this._game_config) this._local_grid_default = this._game_config['default map size'];else this._local_grid_default = this.GRID_SIZE;\n    this.create_map_adder();\n    this.points = this.create_grid(this.GRID_SIZE);\n    this.subsequent_changes = [];\n    this.controls.orderer._entry = this;\n    this.controls.orderer.onclick = function () {\n      var base = this._entry;\n      if (base.current_state.map != '_unknown') base.map_element_overlays[base.current_state.map]._element.style.backgroundColor = '#880000';\n      var sorted_maps = [];\n      for (var map_name in base.maps) {\n        if (map_name == '_unknown') continue;\n        sorted_maps.push([base.maps[map_name]['general_data']['order'], map_name]);\n      }\n      sorted_maps.sort();\n      var sorted_divs = document.getElementsByClassName('map_overlay');\n      for (var [index, map_data] of sorted_maps.entries()) {\n        var map_name = map_data[1];\n        sorted_divs[index]._element._map_name = map_name;\n        sorted_divs[index]._text.innerHTML = map_name;\n        base.map_element_overlays[map_name] = sorted_divs[index];\n        base.update_flight(map_name);\n        base.set_changer(map_name);\n      }\n      if (base.current_state.map != '_unknown') base.map_element_overlays[base.current_state.map]._element.style.backgroundColor = 'black';\n    };\n    document._entry = this;\n    document.addEventListener('keydown', function (e) {\n      var base = this._entry;\n      if (e.target.tagName == 'INPUT' && e.target.getAttribute('type') != 'checkbox' || e.target.tagName == 'TEXTAREA') return;\n      if (e.key == 't') base.controls.ground_truth.checked = !base.controls.ground_truth.checked;\n      if (!base.current_state.marked) return;\n      var current_place = base.current_state.marked._coordinates;\n      var direction_int = base.current_state.direction;\n      var direction = integer_to_dir[direction_int];\n      var changes_introduced = [];\n      var directional_keys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n      if (directional_keys.includes(e.key) && base.controls.overhead.checked) {\n        changes_introduced = base.process_overhead_move(e.key);\n        if (base.current_state.map && base.map_element_overlays[base.current_state.map] && changes_introduced.length) base.changer();\n        base.subsequent_changes.push([Object.assign({}, base.current_state), changes_introduced]);\n        return;\n      }\n      if (e.key == 'ArrowUp' || e.key == 'ArrowDown' && !base.revert) {\n        changes_introduced = base.process_move_forward(e.key);\n        if (base.current_state.map && base.map_element_overlays[base.current_state.map] && changes_introduced.length) base.changer();\n        base.subsequent_changes.push([Object.assign({}, base.current_state), changes_introduced]);\n        return;\n      }\n      if (e.key == 'ArrowDown' && base.revert) {\n        base.current_state.direction = (base.current_state.direction + 2) % 4;\n        base.subsequent_changes.push([Object.assign({}, base.current_state), []]);\n        base.update_presentation(base.current_state);\n        return;\n      }\n      if (e.key == 'y') {\n        if (this.maps[base.current_state.map]['points_data'][base.current_state.marked._signature]['scripts']) {\n          var partial_scripts = this.maps[base.current_state.map]['points_data'][base.current_state.marked._signature]['scripts'].split('\\n');\n          for (var script of partial_scripts) {\n            var proper_script = script.split(';');\n            if (proper_script[0] == 'P' && proper_script[1].includes(dir_to_cardinal[direction_int])) {\n              base.enforce_new_state(base.create_next_state(proper_script[2], proper_script[3], proper_script[4] ?? base.current_state.direction));\n              base.subsequent_changes.push([Object.assign({}, base.current_state), []]);\n            }\n            if (proper_script[0] == 'R' && proper_script[1] == dir_to_cardinal[direction_int]) {\n              base.current_state.direction = (base.current_state.direction + 2) % 4;\n              base.subsequent_changes.push([Object.assign({}, base.current_state), []]);\n              base.update_presentation(base.current_state);\n            }\n          }\n        }\n        return;\n      }\n\n      //Change: teleporting into unknown\n      if (e.key == 'j') {\n        var new_signature = base.move_in_direction(base.current_state.marked._signature, base.current_state.direction, 2);\n        base.enforce_new_state({\n          'map': base.current_state.map,\n          'signature': new_signature,\n          'direction': base.current_state.direction\n        });\n        base.subsequent_changes.push([Object.assign({}, base.current_state), []]);\n        return;\n      }\n      for (var terrain in this._local_terrains) {\n        if (e.key == this._local_terrains[terrain]['button']) {\n          if (this.maps[base.current_state.map]['points_data'][base.current_state.marked._signature]['terrains'].has(terrain)) this.maps[base.current_state.map]['points_data'][base.current_state.marked._signature]['terrains'].delete(terrain);else this.maps[base.current_state.map]['points_data'][base.current_state.marked._signature]['terrains'].add(terrain);\n          this.proper_background(this.maps[base.current_state.map]['points_data'][base.current_state.marked._signature], base.current_state.marked._signature);\n          this.changer();\n          return;\n        }\n      }\n      if (e.key == 'ArrowLeft' || e.key == 'ArrowRight') {\n        if (e.key == 'ArrowLeft') {\n          base.current_state.direction -= 1;\n          if (base.current_state.direction < 0) base.current_state.direction += 4;\n        } else base.current_state.direction = (base.current_state.direction + 1) % 4;\n        base.update_presentation(base.current_state);\n        base.subsequent_changes.push([Object.assign({}, base.current_state), []]);\n        return;\n      }\n      if (e.key == 'Backspace') {\n        if (document.activeElement.tagName == 'INPUT') ;else if (base.subsequent_changes) {\n          base.current_state.marked._arrow.innerHTML = '';\n          var dead_state, last_changes;\n          [dead_state, last_changes] = base.subsequent_changes.pop();\n          for (var change of last_changes) {\n            if (change[0] == 1) {\n              base.points[change[1]].style[`border${dir_to_border[change[2]]}`] = '1px solid black';\n              base.maps[base.current_state.map]['points_data'][change[1]].borders[change[2]] = false;\n            }\n            if (change[0] == 0) {\n              base.points[change[1]].style[`backgroundColor`] = 'grey';\n              base.maps[base.current_state.map]['points_data'][change[1]].used = false;\n            }\n          }\n          if (base.subsequent_changes.length) {\n            var last_state = base.subsequent_changes[base.subsequent_changes.length - 1][0];\n            if (last_state.map != base.current_state.map) base.change_map(last_state.map);\n            base.current_state.direction = last_state.direction;\n            base.current_state.marked = last_state.marked;\n          } else {\n            base.current_state.direction = -1;\n            base.current_state.marked = null;\n          }\n          base.update_presentation(base.current_state);\n        }\n        return;\n      }\n    });\n    document.getElementById('saver')._entry = this;\n    document.getElementById('saver').onclick = function () {\n      this._entry.dechanger();\n      var points_data = [JSON.stringify(this._entry.create_data_dump())];\n      var blob = new Blob(points_data, {\n        type: 'text/plain'\n      }); // the blob\n\n      var _a = document.createElement('a');\n      _a.download = this._entry.current_state.map + '.json';\n      _a.href = URL.createObjectURL(blob);\n      _a.dataset.downloadurl = ['json', _a.download, _a.href].join(':');\n      _a.style.display = 'none';\n      document.body.appendChild(_a);\n      _a.click();\n      document.body.removeChild(_a);\n    };\n    const file_input = document.getElementById('loader');\n    file_input._entry = this;\n    file_input.onchange = () => {\n      var all_selected = file_input.files;\n      this.save_map_data();\n      var base = this;\n      for (var map of all_selected) {\n        var _ = map.text().then(function (result) {\n          var full_data = JSON.parse(result);\n          var map_name = full_data['title'];\n          base.maps[map_name] = new Map({\n            'title': map_name,\n            'full_data': full_data\n          });\n          if (map_name in base.map_element_overlays) base.dechanger(map_name);else {\n            var map_overlay = base.create_new_map_overlay(map_name);\n            base.map_element_overlays[map_name] = map_overlay;\n            base.controls.maps_list.appendChild(map_overlay);\n            base.update_flight(map_name);\n          }\n        });\n      }\n    };\n    document.getElementById('rename')._entry = this;\n    document.getElementById('rename').onclick = function () {\n      this._entry.controls.map_name.disabled = false;\n    };\n    document.getElementById('save_name')._entry = this;\n    document.getElementById('save_name').onclick = function () {\n      this._entry.controls.map_name.disabled = true;\n      this._entry.rename_map(this._entry.current_state.map, this._entry.controls.map_name.value);\n    };\n  }\n}\n\n//# sourceURL=webpack://my-webpack-project/./src/seminal.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;